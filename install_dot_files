#!/bin/sh

# Install dotfiles as symlinks to files in git repo
# Written in the most basic Bourne shell script for portability
# and running on small containers, etc.

VERBOSITY_LEVEL=1

# Usage:
#   install_dot_files [-v N]

case "$1" in
  -v) VERBOSITY_LEVEL=$2
      shift; shift ;;
esac


##
## Define functions up front
##
verbose_echo() {
  VERBOSITY_OF_MESSAGE=$1; shift
  if [ "$VERBOSITY_LEVEL" -ge "$VERBOSITY_OF_MESSAGE " ]; then
    echo $*
  fi
}

# We want symbolic links relative to the home directory
# so work out the relative destination.
DOTFILESRCDIR=`pwd | sed -e s?$HOME/??g`
verbose_echo 2 "DOTFILESRCDIR is $DOTFILESRCDIR"

# We expect to be run from the source directory,
# do a quick sanity check that this is so.
THIS_SCRIPT_NAME=`basename $0`
THIS_SCRIPT_FILE="$HOME/$DOTFILESRCDIR/$THIS_SCRIPT_NAME" 
if [ ! -f "$THIS_SCRIPT_FILE" ]; then
  echo "$THIS_SCRIPT_NAME needs to be run from the dotfiles source dir"
  exit 1
fi


# We want to make symbolic links in the home directory,
# so move there.
cd $HOME

check_and_handle_existing_symlink() {
  # Handle case where target is an existing symbolic link
  TARGET=$1
  DOTFILE=".${TARGET}"
  verbose_echo 4 "check_and_handle_existing_symlink()"
  verbose_echo 5 TARGET is $TARGET and DOTFILE is $DOTFILE

  if [ -L "$DOTFILE" ]; then

    verbose_echo 1 "\$HOME/${DOTFILE} is existing symbolic link, skipping..."
    # FIXME: should check if it points where we think it should,
    # and continue silently if so, or give a warning for a manual
    # fix if not.
    return 0

  fi

  return 1
}


check_and_handle_existing_regular_file() {
  # Give warning if file already exists and is a regular file
  TARGET=$1
  DOTFILE=".${TARGET}"
  verbose_echo 4 "check_and_handle_existing_regular_file()"
  verbose_echo 5 TARGET is $TARGET and DOTFILE is $DOTFILE

  if [ -f "${DOTFILE}" ]; then
    echo "\$HOME/$DOTFILE already exists, and is a regular file not"
    echo 'a symbolic link. Not touching it - please handle it manually.'
    return 0
  fi

  return 1
}


create_new_symlink() {
  TARGET=$1
  DOTFILE=".${TARGET}"
  verbose_echo 4 "create_new_symlink()"
  verbose_echo 5 TARGET is $TARGET and DOTFILE is $DOTFILE

  if [ ! -e "$HOME/$TARGET" ]; then
    verbose_echo 1 "\$HOME/$DOTFILE does not exist"
    verbose_echo 1 \
      "symbolically linking \$HOME/$DOTFILE to ${DOTFILESRCDIR}/$TARGET"

    ln -s "${DOTFILESRCDIR}/$TARGET" "$DOTFILE"
    return 0
  fi

  return 1
}


handle_file() {
  FILENAME=$1

  check_and_handle_existing_symlink "$FILENAME"      || \
  check_and_handle_existing_regular_file "$FILENAME" || \
  create_new_symlink "$FILENAME"                     || \
    echo "No target seems to have worked"
}




handle_file "vimrc"
handle_file "aliases"
handle_file "vim"
handle_file "tmux.conf"
handle_file "gitconfig"
handle_file "gitignore_global"

exit 0

